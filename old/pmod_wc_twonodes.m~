%% pmod_wc_twonodes.m

clear

% VERSION 2
% -------------------------------
v         = 1;
Gains     = 0:0.05:0.6;
SIG       = [0.005];
Ies       = -8:0.1:8;
Iis       = -8:0.1:9;
% -------------------------------
nTrials = 1;

numIes = length(Ies);
N = 4;

tmax        = 6500; % in units of tauE
dt=0.01;
tspan=0:dt:tmax;
L = length(tspan);
ds = 10;
Tds = length(0:ds*dt:tmax)-1;
tauEsec = 0.009; % in seconds
resol = ds*dt*tauEsec;
time = (0:ds*dt:tmax-ds*dt)*tauEsec;

tauE = 1;
tauI = 2;
% tau = zeros(2*N,1);
tau(1:2) = tauE;
tau(3:4) = tauI;

sigma = 0.0005;

% Connectivity:
wII=4;
wIE=16;
wEI=12;
wEE=12;

% Connectivity:
W11 = [wEE -wEI; wIE -wII];
W22 = W11;
W12 = [1 0; 0 0];
W21 = [1 0; 0 0];
W = [W11 W12; W21 W22];

% ----------------
% WAVELETS
% ----------------
[wavelet,f]=tp_mkwavelet(11.3137,0.5,(1/resol));
delta_time = 6/pi./(f(2)-f(1));
delta_time = round(delta_time*1000)/1000;
t_shift    = delta_time;
n_win      = round(delta_time*(1/resol));
n_shift    = round(t_shift*(1/resol));
nseg=floor((L/10-n_win)/n_shift+1);
%%
% fixed params:

for iies = 1 : length(Ies)
  for iiis = 1 : length(Iis)
    for igain = 1 : length(Gains)
      
      if ~exist(sprintf('~/pmod/proc/twonodes/v%d/',v))
        mkdir(sprintf(['~/pmod/proc/twonodes/' 'v%d'],v))
      end

      
      outdir = sprintf(['~/pmod/proc/twonodes/v%d/'],v);
      
      fn = sprintf('pmod_wc_twonodes_Ie%d_Ii%d_gain%d_v%d',iies,iiis,igain,v);
      if tp_parallel(fn,outdir,1,0)
        continue
      end
      
      Io=zeros(N,1);
      Io(2) = Iis(iiis);
      Io(4) = Iis(iiis);
      Io(1) = Ies(iies);
      Io(3) = Ies(iies);

      uu = -4:.1:4;
      Transf = zeros(length(uu),2,4);
      Gain  = Gains(igain);
      sdt   = sqrt(dt)*sigma;
      
      % transfer functions:
      % gains are given by 1/aE and 1/aI
      gE = 1+Gain;
      gI = 1+Gain;
      
      aE = 1/gE;
      aI = 1/gI;
      
      Fe = @(x) 1./(1 + exp(-x/aE) );
      Fi = @(x) 1./(1 + exp(-x/aI) );
      F = @(x) [feval(Fe,x(1));feval(Fi,x(2));feval(Fe,x(3));feval(Fi,x(4))];
      
      T           = Tds*resol; %% define time of interval
      freqs       = (0:Tds/2)/T; %% find the corresponding frequency in Hz
      freq100     = freqs(freqs<100 & freqs>1);
      pp          = 1:10:length(freq100);
      
      for trial = 1:nTrials
        fprintf('Simulating trial %d...\n',trial)
        r = rand(N,1);
        R = zeros(Tds,N);
        tt = 0;
        
        % Warm-up:
        for t = 1:5000
          u = W*r + Io;
          K = feval(F,u);
          r = r + dt*(-r + K)./tau' + sdt*randn(N,1);
        end
        tt = 1; clear R Ri
        for t = 1:L
          t
          u = W*r + Io;
          K = feval(F,u);
          r = r + dt*(-r+ K)./tau' + sdt*randn(N,1);
          if mod(t,ds)==0
            tt=tt+1;
            R(tt,:)  = r([1 3]);
            Ri(tt,:) = r([2 4]);
          end
        end
        
        rE = R;
        
        for j=1:nseg
          dloc2=rE((j-1)*n_shift+1:(j-1)*n_shift+n_win,:)';
          dataf(j,:)=abs(dloc2*wavelet).^2;
        end
        out.rc_wl = corr(dataf);
        out.rc_wl_cov = cov(dataf);
        
      end
      
      save(sprintf('~/pmod/proc/pmod_wc_excbif_iis%d_ies%d_g%d_v%d.mat',iiis,iies,ig,v),'outp')
      
    end
  end
end

